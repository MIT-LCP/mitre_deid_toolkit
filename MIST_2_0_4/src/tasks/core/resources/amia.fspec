w1    as wdFn;
e     as edgeFn;
n     as nodeFn;
up1   as caselessWdFn;
pre1  as prefixFn(2);
suf1  as suffixFn(2);
ng2   as wdFn ngram (-2,-1);
wwd1  as wdFn over (-2,-1,1,2); 
r1    as regexpFn(INITCAP, [A-Z].*$);
r3    as regexpFn(INITCAP_ALPHA, [A-Z][a-z]*$);
r4    as regexpFn(ALL_CAPS, [A-Z]+$);
r5    as regexpFn(CAPS_MIX, [A-Za-z]+$);
r6    as regexpFn(HAS_DIGIT, .*[0-9].*$);
r7    as regexpFn(SINGLE_DIGIT, [0-9]$);
r8    as regexpFn(DOUBLE_DIGIT, [0-9][0-9]$);
r9    as regexpFn(FOUR_DIGIT, [0-9][0-9][0-9][0-9]$);
r10   as regexpFn(NAT_NUM, [0-9]+$);
r11   as regexpFn(REAL_NUM, [0-9]\\.[0-9]+$);
r12   as regexpFn(ALPHA_NUM, [0-9A-Za-z]+$);
r13   as regexpFn(ROMAN, [lcximvLCXIMV]+$);
r14   as regexpFn(HAS_DASH, .*-.*$);
r15   as regexpFn(INIT_DASH, ^-.*$);
r16   as regexpFn(END_DASH, .*-$);
r17   as regexpFn(PUNCT, ^[^A-Za-z0-9]+$);
cap   as regexpFn(ICAP, ^[A-Z].*$) over (-2,-1,1,2);
lfn   as lexFn over (-2 to 2);
